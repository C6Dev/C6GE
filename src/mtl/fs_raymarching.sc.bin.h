static const uint8_t fs_raymarching_mtl[6921] =
{
	0x46, 0x53, 0x48, 0x0b, 0x01, 0x83, 0xf2, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x75, // FSH............u
	0x5f, 0x6d, 0x74, 0x78, 0x14, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x75, // _mtx...........u
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x01, 0x40, // _lightDirTime..@
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xca, 0x1a, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // ...........#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, // l.{.    float4x4
	0x20, 0x75, 0x5f, 0x6d, 0x74, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  u_mtx;.    floa
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x54, 0x69, 0x6d, // t4 u_lightDirTim
	0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // e;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // r(0)]];.    floa
	0x74, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, // t gl_FragDepth [
	0x5b, 0x64, 0x65, 0x70, 0x74, 0x68, 0x28, 0x61, 0x6e, 0x79, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, // [depth(any)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x20, 0x5b, // loat4 v_color0 [
	0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // [user(locn0)]];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, //     float2 v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, // coord0 [[user(lo
	0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, // cn1)]];.};..frag
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ment xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // _out xlatMtlMain
	0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, // (xlatMtlMain_in 
	0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, // in [[stage_in]],
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, //  constant _Globa
	0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, // l& _mtl_u [[buff
	0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, // er(0)]]).{.    x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, // latMtlMain_out o
	0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ut = {};.    flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x35, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // at4 _557 = _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x6d, 0x74, 0x78, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // u.u_mtx * float4
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, // (in.v_texcoord0,
	0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //  0.0, 1.0);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x35, // float3 _563 = _5
	0x35, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 57.xyz / float3(
	0x5f, 0x35, 0x35, 0x37, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // _557.w);.    flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x37, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // at4 _570 = _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x6d, 0x74, 0x78, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // u.u_mtx * float4
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, // (in.v_texcoord0,
	0x20, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //  1.0, 1.0);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x35, // float3 _576 = _5
	0x37, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 70.xyz / float3(
	0x5f, 0x35, 0x37, 0x30, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // _570.w);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x35, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, // at _580 = length
	0x28, 0x5f, 0x35, 0x37, 0x36, 0x20, 0x2d, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x29, 0x3b, 0x0a, 0x20, // (_576 - _563);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x38, 0x34, 0x20, 0x3d, //    float3 _584 =
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, //  fast::normalize
	0x28, 0x5f, 0x35, 0x37, 0x36, 0x20, 0x2d, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x29, 0x3b, 0x0a, 0x20, // (_576 - _563);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x3b, 0x0a, //    float _1693;.
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, //     _1693 = 0.0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x37, 0x30, 0x30, // .    float _1700
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ;.    for (int _
	0x31, 0x36, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x32, 0x20, // 1692 = 0; _1692 
	0x3c, 0x20, 0x36, 0x34, 0x3b, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x31, // < 64; _1693 = _1
	0x37, 0x30, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x32, 0x2b, 0x2b, 0x29, 0x0a, 0x20, 0x20, // 700, _1692++).  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //   {.        floa
	0x74, 0x33, 0x20, 0x5f, 0x36, 0x35, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x20, 0x2b, // t3 _657 = _563 +
	0x20, 0x28, 0x5f, 0x35, 0x38, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x29, 0x3b, //  (_584 * _1693);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // .        float _
	0x37, 0x33, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // 733 = fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // fast::min(fast::
	0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, // min(fast::min(fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // st::min(fast::mi
	0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // n(length(fast::m
	0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x36, 0x35, 0x37, 0x29, 0x20, 0x2d, 0x20, 0x66, // ax(abs(_657) - f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // loat3(2.5), floa
	0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, // t3(0.0))) - 0.5,
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x36, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x66, //  length(_657 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, // loat3(4.0, 0.0, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, // 0.0)) - 1.0), le
	0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x36, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ngth(_657 + floa
	0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // t3(-4.0, 0.0, 0.
	0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, // 0)) - 1.0), leng
	0x74, 0x68, 0x28, 0x5f, 0x36, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // th(_657 + float3
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // (0.0, 4.0, 0.0))
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, //  - 1.0), length(
	0x5f, 0x36, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, // _657 + float3(0.
	0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, // 0, -4.0, 0.0)) -
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x36, //  1.0), length(_6
	0x35, 0x37, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, // 57 + float3(0.0,
	0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, //  0.0, 4.0)) - 1.
	0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x36, 0x35, 0x37, 0x20, // 0), length(_657 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // + float3(0.0, 0.
	0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, // 0, -4.0)) - 1.0)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, // ;.        if (_7
	0x33, 0x33, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 33 > 0.001000000
	0x30, 0x34, 0x37, 0x34, 0x39, 0x37, 0x34, 0x35, 0x31, 0x33, 0x30, 0x35, 0x33, 0x38, 0x39, 0x34, // 0474974513053894
	0x30, 0x34, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 04296875).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x31, 0x37, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x20, 0x2b, 0x20, // _1700 = _1693 + 
	0x5f, 0x37, 0x33, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // _733;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, //    _1700 = _1693
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x37, 0x35, // }.    float _675
	0x20, 0x3d, 0x20, 0x28, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x20, 0x3c, 0x20, 0x5f, 0x35, 0x38, 0x30, //  = (_1693 < _580
	0x29, 0x20, 0x3f, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x33, 0x20, 0x3a, 0x20, 0x30, 0x2e, 0x30, 0x3b, // ) ? _1693 : 0.0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x36, 0x39, // .    float4 _169
	0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, // 7;.    float _16
	0x39, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x37, 0x35, // 98;.    if (_675
	0x20, 0x3e, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //  > 0.5).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x39, //       float3 _59
	0x36, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x35, 0x38, 0x34, // 6 = _563 + (_584
	0x20, 0x2a, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  * _675);.      
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x31, 0x37, 0x20, 0x3d, 0x20, //   float3 _817 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, // fast::normalize(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // float3(fast::min
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, // :min(fast::min(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // in(length(fast::
	0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, // max(abs(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, // loat3(0.00200000
	0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, // 0094994902610778
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // 80859375, 0.0, 0
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, // .0)) - float3(2.
	0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // 5), float3(0.0))
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, // ) - 0.5, length(
	0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, // _596 + float3(4.
	0x30, 0x30, 0x31, 0x39, 0x39, 0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, 0x33, 0x39, // 0019998550415039
	0x30, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // 0625, 0.0, 0.0))
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, //  - 1.0), length(
	0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x33, // _596 + float3(-3
	0x2e, 0x39, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x30, 0x36, 0x35, 0x33, 0x39, 0x39, 0x31, 0x36, // .997999906539916
	0x39, 0x39, 0x32, 0x31, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 9921875, 0.0, 0.
	0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, // 0)) - 1.0), leng
	0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // th(_596 + float3
	0x28, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, // (0.0020000000949
	0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, // 9490261077880859
	0x33, 0x37, 0x35, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // 375, 4.0, 0.0)) 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, // - 1.0), length(_
	0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, // 596 + float3(0.0
	0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, // 0200000009499490
	0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, // 261077880859375,
	0x20, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, //  -4.0, 0.0)) - 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, // .0), length(_596
	0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, //  + float3(0.0020
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, // 0000009499490261
	0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, // 077880859375, 0.
	0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 0, 4.0)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, // loat3(0.00200000
	0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, // 0094994902610778
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, // 80859375, 0.0, -
	0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, // 4.0)) - 1.0) - f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, // in(fast::min(fas
	0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // t::min(fast::min
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, // (fast::min(lengt
	0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, // h(fast::max(abs(
	0x5f, 0x35, 0x39, 0x36, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, // _596 - float3(0.
	0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, // 0020000000949949
	0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 0261077880859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, // , 0.0, 0.0)) - f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // loat3(2.5), floa
	0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, // t3(0.0))) - 0.5,
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x33, 0x2e, 0x39, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x30, // loat3(3.99799990
	0x36, 0x35, 0x33, 0x39, 0x39, 0x31, 0x36, 0x39, 0x39, 0x32, 0x31, 0x38, 0x37, 0x35, 0x2c, 0x20, // 65399169921875, 
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // 0.0, 0.0)) - 1.0
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, // ), length(_596 +
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, 0x30, 0x30, 0x31, 0x39, 0x39, //  float3(-4.00199
	0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, 0x33, 0x39, 0x30, 0x36, 0x32, 0x35, 0x2c, // 985504150390625,
	0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, //  0.0, 0.0)) - 1.
	0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // 0), length(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, // + float3(-0.0020
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, // 0000009499490261
	0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x34, 0x2e, // 077880859375, 4.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 0, 0.0)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, // loat3(-0.0020000
	0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, // 0009499490261077
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x2c, // 880859375, -4.0,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, //  0.0)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // at3(-0.002000000
	0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, // 0949949026107788
	0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, // 0859375, 0.0, 4.
	0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, // 0)) - 1.0), leng
	0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // th(_596 + float3
	0x28, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, // (-0.002000000094
	0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, // 9949026107788085
	0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x29, // 9375, 0.0, -4.0)
	0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // ) - 1.0), fast::
	0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, // min(fast::min(fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // st::min(fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, // n(fast::min(fast
	0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, // ::min(length(fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // t::max(abs(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // + float3(0.0, 0.
	0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, // 0020000000949949
	0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 0261077880859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // , 0.0)) - float3
	0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, // (2.5), float3(0.
	0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, // 0))) - 0.5, leng
	0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // th(_596 + float3
	0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, // (4.0, 0.00200000
	0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, // 0094994902610778
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // 80859375, 0.0)) 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, // - 1.0), length(_
	0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, // 596 + float3(-4.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, // 0, 0.00200000009
	0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, // 4994902610778808
	0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, // 59375, 0.0)) - 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, // .0), length(_596
	0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, //  + float3(0.0, 4
	0x2e, 0x30, 0x30, 0x31, 0x39, 0x39, 0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, 0x33, // .001999855041503
	0x39, 0x30, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, // 90625, 0.0)) - 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, // .0), length(_596
	0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, //  + float3(0.0, -
	0x33, 0x2e, 0x39, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x30, 0x36, 0x35, 0x33, 0x39, 0x39, 0x31, // 3.99799990653991
	0x36, 0x39, 0x39, 0x32, 0x31, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // 69921875, 0.0)) 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, // - 1.0), length(_
	0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, // 596 + float3(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, // , 0.002000000094
	0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, // 9949026107788085
	0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, // 9375, 4.0)) - 1.
	0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // 0), length(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // + float3(0.0, 0.
	0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, // 0020000000949949
	0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 0261077880859375
	0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // , -4.0)) - 1.0) 
	0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, // - fast::min(fast
	0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // ::min(fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // fast::min(fast::
	0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x6c, 0x65, // min(fast::min(le
	0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x61, // ngth(fast::max(a
	0x62, 0x73, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // bs(_596 - float3
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, // (0.0, 0.00200000
	0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, // 0094994902610778
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // 80859375, 0.0)) 
	0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, // - float3(2.5), f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, // loat3(0.0))) - 0
	0x2e, 0x35, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // .5, length(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, // + float3(4.0, -0
	0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, // .002000000094994
	0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, // 9026107788085937
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 5, 0.0)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, // loat3(-4.0, -0.0
	0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, // 0200000009499490
	0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, // 261077880859375,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, //  0.0)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x33, 0x2e, 0x39, 0x39, 0x37, 0x39, 0x39, // at3(0.0, 3.99799
	0x39, 0x39, 0x30, 0x36, 0x35, 0x33, 0x39, 0x39, 0x31, 0x36, 0x39, 0x39, 0x32, 0x31, 0x38, 0x37, // 9906539916992187
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 5, 0.0)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x30, // loat3(0.0, -4.00
	0x31, 0x39, 0x39, 0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, 0x33, 0x39, 0x30, 0x36, // 1999855041503906
	0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, // 25, 0.0)) - 1.0)
	0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, // , length(_596 + 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, // float3(0.0, -0.0
	0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, // 0200000009499490
	0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, // 261077880859375,
	0x20, 0x34, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, //  4.0)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, // at3(0.0, -0.0020
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, // 0000009499490261
	0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x2d, 0x34, // 077880859375, -4
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x61, 0x73, // .0)) - 1.0), fas
	0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // t::min(fast::min
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, // :min(fast::min(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, // ast::min(length(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x35, // fast::max(abs(_5
	0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, // 96 + float3(0.0,
	0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, //  0.0, 0.00200000
	0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, // 0094994902610778
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, // 80859375)) - flo
	0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // at3(2.5), float3
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x6c, // (0.0))) - 0.5, l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // at3(4.0, 0.0, 0.
	0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, // 0020000000949949
	0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 0261077880859375
	0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, // )) - 1.0), lengt
	0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // h(_596 + float3(
	0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, // -4.0, 0.0, 0.002
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, // 0000000949949026
	0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, // 1077880859375)) 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, // - 1.0), length(_
	0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, // 596 + float3(0.0
	0x2c, 0x20, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, // , 4.0, 0.0020000
	0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, // 0009499490261077
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, // 880859375)) - 1.
	0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // 0), length(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, // + float3(0.0, -4
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // .0, 0.0020000000
	0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, // 9499490261077880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 859375)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, // loat3(0.0, 0.0, 
	0x34, 0x2e, 0x30, 0x30, 0x31, 0x39, 0x39, 0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, // 4.00199985504150
	0x33, 0x39, 0x30, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, // 390625)) - 1.0),
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, //  length(_596 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, // loat3(0.0, 0.0, 
	0x2d, 0x33, 0x2e, 0x39, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x30, 0x36, 0x35, 0x33, 0x39, 0x39, // -3.9979999065399
	0x31, 0x36, 0x39, 0x39, 0x32, 0x31, 0x38, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, // 169921875)) - 1.
	0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, // 0) - fast::min(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, // in(fast::min(fas
	0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // t::min(fast::min
	0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, // (length(fast::ma
	0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, // x(abs(_596 - flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // at3(0.0, 0.0, 0.
	0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, // 0020000000949949
	0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 0261077880859375
	0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, // )) - float3(2.5)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, // , float3(0.0))) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, // - 0.5, length(_5
	0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, 0x30, 0x2c, // 96 + float3(4.0,
	0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, //  0.0, -0.0020000
	0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, // 0009499490261077
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, // 880859375)) - 1.
	0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, // 0), length(_596 
	0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, // + float3(-4.0, 0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // .0, -0.002000000
	0x30, 0x39, 0x34, 0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, // 0949949026107788
	0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, // 0859375)) - 1.0)
	0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, // , length(_596 + 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x2c, // float3(0.0, 4.0,
	0x20, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, //  -0.002000000094
	0x39, 0x39, 0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, // 9949026107788085
	0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, // 9375)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x2d, // at3(0.0, -4.0, -
	0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x34, 0x39, 0x39, // 0.00200000009499
	0x34, 0x39, 0x30, 0x32, 0x36, 0x31, 0x30, 0x37, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, // 4902610778808593
	0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, // 75)) - 1.0), len
	0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // gth(_596 + float
	0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x33, 0x2e, 0x39, 0x39, // 3(0.0, 0.0, 3.99
	0x37, 0x39, 0x39, 0x39, 0x39, 0x30, 0x36, 0x35, 0x33, 0x39, 0x39, 0x31, 0x36, 0x39, 0x39, 0x32, // 7999906539916992
	0x31, 0x38, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, // 1875)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, // ength(_596 + flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, // at3(0.0, 0.0, -4
	0x2e, 0x30, 0x30, 0x31, 0x39, 0x39, 0x39, 0x38, 0x35, 0x35, 0x30, 0x34, 0x31, 0x35, 0x30, 0x33, // .001999855041503
	0x39, 0x30, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x29, // 90625)) - 1.0)))
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ;.        float 
	0x5f, 0x31, 0x34, 0x35, 0x35, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x38, 0x31, 0x37, // _1455 = dot(_817
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, // , _mtl_u.u_light
	0x44, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // DirTime.xyz);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x39, //       float _169
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x35, // 5;.        _1695
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = 0.0;.        
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x34, 0x20, 0x3d, // for (int _1694 =
	0x20, 0x31, 0x3b, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x34, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x29, //  1; _1694 < 4; )
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x35, //        float _15
	0x31, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x31, 0x36, 0x39, 0x34, // 12 = float(_1694
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // );.            f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x35, // loat3 _1519 = _5
	0x39, 0x36, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x5f, 0x38, 0x31, 0x37, 0x20, 0x2a, 0x20, 0x5f, 0x31, // 96 + ((_817 * _1
	0x35, 0x31, 0x32, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 512) * 0.2000000
	0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, // 0298023223876953
	0x31, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 125);.          
	0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x35, 0x20, 0x2b, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x5f, 0x31, //   _1695 += (((_1
	0x35, 0x31, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 512 * 0.20000000
	0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, 0x31, // 2980232238769531
	0x32, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // 25) - fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // fast::min(fast::
	0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, // min(fast::min(fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // st::min(fast::mi
	0x6e, 0x28, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // n(length(fast::m
	0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x29, 0x20, 0x2d, 0x20, // ax(abs(_1519) - 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // float3(2.5), flo
	0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // at3(0.0))) - 0.5
	0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, // , length(_1519 +
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  float3(4.0, 0.0
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, // , 0.0)) - 1.0), 
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x66, // length(_1519 + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, // loat3(-4.0, 0.0,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, //  0.0)) - 1.0), l
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x66, 0x6c, // ength(_1519 + fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, // oat3(0.0, 4.0, 0
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, // .0)) - 1.0), len
	0x67, 0x74, 0x68, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, // gth(_1519 + floa
	0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // t3(0.0, -4.0, 0.
	0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, // 0)) - 1.0), leng
	0x74, 0x68, 0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // th(_1519 + float
	0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x34, 0x2e, 0x30, 0x29, // 3(0.0, 0.0, 4.0)
	0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, // ) - 1.0), length
	0x28, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // (_1519 + float3(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x34, 0x2e, 0x30, 0x29, 0x29, // 0.0, 0.0, -4.0))
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2f, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, //  - 1.0)) / powr(
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x35, 0x31, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // 2.0, _1512));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x34, 0x2b, //           _1694+
	0x2b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, // +;.            c
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ontinue;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  }.        float
	0x20, 0x5f, 0x36, 0x32, 0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, 0x30, //  _628 = powr(((0
	0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x36, 0x31, 0x35, 0x38, 0x31, 0x34, 0x32, // .899999976158142
	0x30, 0x38, 0x39, 0x38, 0x34, 0x33, 0x37, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // 08984375 * fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x35, 0x35, 0x29, // :max(0.0, _1455)
	0x29, 0x20, 0x2b, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // ) + (powr(step(0
	0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x35, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, // .0, _1455) * fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x64, 0x6f, 0x74, 0x28, // t::max(0.0, dot(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, // _mtl_u.u_lightDi
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x28, 0x5f, 0x38, 0x31, // rTime.xyz - (_81
	0x37, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x34, 0x35, 0x35, // 7 * (2.0 * _1455
	0x29, 0x29, 0x2c, 0x20, 0x5f, 0x35, 0x38, 0x34, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x32, 0x38, 0x2e, // )), _584)), 128.
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, // 0) * fast::max(0
	0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, // .200000002980232
	0x32, 0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x30, // 23876953125 + (0
	0x2e, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x39, 0x32, 0x30, 0x39, 0x32, 0x38, // .800000011920928
	0x39, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, // 955078125 * powr
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x34, 0x35, 0x35, 0x2c, 0x20, 0x35, 0x2e, // (1.0 - _1455, 5.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // 0)), 0.0))) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x34, // .0 - _1695), 0.4
	0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x36, 0x38, 0x30, 0x39, 0x31, 0x39, 0x36, 0x34, 0x37, 0x32, // 5454546809196472
	0x31, 0x36, 0x37, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 16796875);.     
	0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, //    _1698 = _675 
	0x2f, 0x20, 0x5f, 0x35, 0x38, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // / _580;.        
	0x5f, 0x31, 0x36, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, // _1697 = float4(_
	0x36, 0x32, 0x38, 0x2c, 0x20, 0x5f, 0x36, 0x32, 0x38, 0x2c, 0x20, 0x5f, 0x36, 0x32, 0x38, 0x2c, // 628, _628, _628,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, //  1.0);.    }.   
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //  else.    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, //     _1698 = 1.0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x37, 0x20, 0x3d, // .        _1697 =
	0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x3b, 0x0a, 0x20, 0x20, //  in.v_color0;.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, //   }.    out.bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, // _FragData0 = _16
	0x39, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x46, // 97;.    out.gl_F
	0x72, 0x61, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, 0x39, 0x38, // ragDepth = _1698
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, // ;.    return out
	0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x50, 0x00,                                           // ;.}....P.
};
